close all
clear
clc

n=32; % length of window
nb=127; % number of windows; must be > 1
b=4; L=5; % quantization information
q=2*L/(2^b-1); % b bits on interval [-L, L]

for i=1:n % form the MDCT matrix
    for j=1:2*n
        M(i,j)= cos((i-1+1/2)*(j-1+1/2+n/2)*pi/n);
    end
end

%s1 = cos((1:10));
%s2 = cos((1:10)*2);
%disp(s1);
%disp(s2);
%size(s2)
%sampleRate = 4096;
%sound(s2, sampleRate);
%disp(s2);

M=sqrt(2/n)*M;
N=M'; % inverse MDCT
Fs=8192; % Sampleing rate in (htz?)
f=6;  %frequency

x=cos((1:4096)*pi*64*f/4096); % test signal

%Construct the H vector
h = [];
for k=1:2*n
    val = sqrt(2) * sin(  ((k+0.5)*pi) / (2*n)   );
    h = [h val];
end

% Transform input vector via H
% if f is odd
for k=1:2*n
    %Element 1: 1 -> k*64
    %Elemnet 2: 65 -> k*64
    %Element 3: ((k-1) * 64) + 1 -> k*64
    bound1 = ((k-1) * 64) + 1;
    bound2 = k*64;
    x(bound1:bound2) = x(bound1:bound2).*h;
end

%disp(xh);
% plot(x);
% disp(x);
sound(x,Fs) % Matlab’s sound command

out=[];
for k=1:nb % loop over windows
    x0=x(1+(k-1)*n:2*n+(k-1)*n)';
    y0=M*x0;
    
    y1=round(y0/q); % transform components quantized
    y2=y1*q; % and dequantized
    w(:,k)=N*y2; % invert the MDCT
    if(k>1)
    w2=w(n+1:2*n,k-1);w3=w(1:n,k);
    
    %If F is odd
    disp(size(w2));
    disp(h(1:32)
    w2 = w2.*h(1:32);
    w3 = w3.*h(33:64);
 
    
    out=[out;(w2+w3)/2]; % collect the reconstructed signal
    end
end
%disp(size(out));

figure(1);
plot(x);
hold on 
plot(x, 'o');
title('Input Data With Even f');
legend('Input Data Points','Fitted wave')
xlim([0,1000]);

figure(2);
plot(out);
hold on
plot(out, 'o');
title('Output With Even f');
legend('Reconstructed data points','Fitted wave from points')
xlim([0,100]);


pause(1)
sound(out,Fs) % play the reconstructed tone